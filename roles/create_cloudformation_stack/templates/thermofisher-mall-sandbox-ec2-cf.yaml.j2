---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation to create EC2 with security group.'
Parameters:
  VPCCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.1.0.0/16
    Type: String
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
    Default: '{{ keypair_name }}'
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: Amazon EC2 instance type
    Type: String
    Default: t2.xlarge
    AllowedValues: [m4.xlarge, m5.xlarge, m6g.xlarge, t2.xlarge, t3.xlarge, t3a.xlarge, t4g.xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  OperatingSystem:
    Description: Amazon EC2 operating system type (Linux or Windows)
    Type: String
    Default: Windows
    ConstraintDescription: must be Windows or Linux
    AllowedValues:
      - Windows
  PublicLocation:
    Description: The IP address range that can be used to access the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  OfficeLocation1:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 27.115.111.38/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  OfficeLocation2:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 211.152.44.11/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionOS2AMI:
    cn-northwest-1:
      Windows: ami-032faed28be60a30c
  OS2SSHPort:
    Linux:
      SSHPort: '22'
    Windows:
      SSHPort: '3389'
Resources:
  TFSMallVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            Fn::Sub: '{{ project | replace(" ", "-") }}-${AWS::Region}-{{ deploy_environment }}'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: TFSMallVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TFSMallVPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TFSMallVPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '{{ project | replace(" ", "-") }}-${AWS::Region}-{{ deploy_environment }}-public-a'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TFSMallVPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '{{ project | replace(" ", "-") }}-${AWS::Region}-{{ deploy_environment }}-public-b'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TFSMallVPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '{{ project | replace(" ", "-") }}-${AWS::Region}-{{ deploy_environment }}-private-a'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TFSMallVPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '{{ project | replace(" ", "-") }}-${AWS::Region}-{{ deploy_environment }}-private-b'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TFSMallVPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TFSMallVPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  EC2AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds:
        - !GetAtt AppInstanceSecurityGroup.GroupId
      KeyName: !Ref 'KeyPairName'
      ImageId:
        'Fn::FindInMap':
          - RegionOS2AMI
          - Ref: 'AWS::Region'
          - Ref: OperatingSystem
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: 'Name'
          Value: '{{ project | replace(" ", "-") }}-app-server-{{ deploy_environment }}-ec2'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  EC2DBInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds:
        - !GetAtt DBInstanceSecurityGroup.GroupId
      KeyName: !Ref 'KeyPairName'
      ImageId:
        'Fn::FindInMap':
          - RegionOS2AMI
          - Ref: 'AWS::Region'
          - Ref: OperatingSystem
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: 'Name'
          Value: '{{ project | replace(" ", "-") }}-db-server-{{ deploy_environment }}-ec2'
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  AppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access and SSH access
      GroupName: '{{ project | replace(" ", "-") }}-app-server-{{ deploy_environment }}-sg'
      VpcId: !Ref TFSMallVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'PublicLocation'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'PublicLocation'
        - IpProtocol: tcp
          FromPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          ToPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          CidrIp: !Ref 'OfficeLocation1'
          Description: 'Jifen Keji Office'
        - IpProtocol: tcp
          FromPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          ToPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          CidrIp: !Ref 'OfficeLocation2'
          Description: 'Jifen Keji Office'
      Tags:
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
  DBInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable DB access and SSH access
      GroupName: '{{ project | replace(" ", "-") }}-db-server-{{ deploy_environment }}-sg'
      VpcId: !Ref TFSMallVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !GetAtt AppInstanceSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          ToPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          CidrIp: !Ref 'OfficeLocation1'
          Description: 'Jifen Keji Office'
        - IpProtocol: tcp
          FromPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          ToPort:
            'Fn::FindInMap':
              - OS2SSHPort
              - Ref: OperatingSystem
              - SSHPort
          CidrIp: !Ref 'OfficeLocation2'
          Description: 'Jifen Keji Office'
      Tags:
{% for tag in aws_resource_tags %}
        - Key: {{ tag.Key }}
          Value: '{{ tag.Value }}'
{% endfor %}
Outputs:
  AppInstanceId:
    Description: InstanceId of the newly created app server EC2 instance
    Value: !Ref 'EC2AppInstance'
  AppPublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2AppInstance, PublicDnsName]
  AppPublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2AppInstance, PublicIp]
  DBInstanceId:
    Description: InstanceId of the newly created app server EC2 instance
    Value: !Ref 'EC2DBInstance'
  DBPublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2DBInstance, PublicDnsName]
  DBPublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2DBInstance, PublicIp]